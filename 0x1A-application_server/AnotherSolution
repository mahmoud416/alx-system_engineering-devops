0x1A-application_server/2-app_server-nginx_config

server {
    listen 80 default_server;
    listen [::]:80 default_server;

    # Use IP of server as domain name
    server_name 54.87.994.2

    # Customize HTTP response header
    add_header X-Served-By 228560-web-01;

    # Serve /airbnb-onepage/ route on AirBnB_clone_v3
    location = /airbnb-onepage/ {
        proxy_pass http://127.0.0.1:5000/airbnb-onepage/;
    }

    error_page 404 /404.html;
    location /404 {
      root /var/www/html;
      internal;
    }
}


0x1A-application_server/3-app_server-nginx_config

server {
    listen 80 default_server;
    listen [::]:80 default_server ipv6only=on;

    # Use IP of server as domain name
    server_name 54.87.994.2

    # Customize HTTP response header
    add_header X-Served-By 228560-web-01;

    # Serve /airbnb-onepage/ route on AirBnB_clone_v3
    location = /airbnb-onepage/ {
        proxy_pass http://127.0.0.1:5000/airbnb-onepage/;
    }

    # Serve /number_odd_or_even/ route on AirBnB_clone_v2
    location ~ /airbnb-dynamic/number_odd_or_even/(\d+)$ {
        proxy_pass http://127.0.0.1:5001/number_odd_or_even/$1;
    }

    error_page 404 /404.html;
    location /404 {
      root /var/www/html;
      internal;
    }
}

0x1A-application_server/4-app_server-nginx_config

server {
    listen 80 default_server;
    listen [::]:80 default_server;

    # Use IP of server as domain name
    server_name 54.87.994.2

    # Customize HTTP response header
    add_header X-Served-By 228560-web-01;

    # Serve /airbnb-onepage/ route on AirBnB_clone_v3
    location = /airbnb-onepage/ {
        proxy_pass http://127.0.0.1:5000/airbnb-onepage/;
    }

    # Serve /number_odd_or_even/ route on AirBnB_clone_v2
    location ~ /airbnb-dynamic/number_odd_or_even/(\d+)$ {
        proxy_pass http://127.0.0.1:5001/number_odd_or_even/$1;
    }

    # Serve API on AirBnB_clone_v3
    location /api/ {
        proxy_pass http://127.0.0.1:5002/;
    }

    error_page 404 /404.html;
    location /404 {
      root /var/www/html;
      internal;
    }
}

0x1A-application_server/4-reload_gunicorn_no_downtime

#!/usr/bin/env bash
# Gracefully reloads Gunicorn.

# Find Gunicorn process IDs
gunicorn_pids=$(pgrep gunicorn)

if [ -z "$gunicorn_pids" ]; then
    echo "No Gunicorn processes found."
    exit 1
fi

# Stop old workers gracefully
echo "Stopping old workers gracefully..."
for pid in $gunicorn_pids; do
    kill -HUP "$pid"
done

# Wait for old workers to finish processing
echo "Waiting for old workers to finish processing..."
sleep 5

echo "Graceful reload complete"

0x1A-application_server/5-app_server-nginx_config

server {
    listen 80 default_server;
    listen [::]:80 default_server;

    # Use IP of server as domain name
    server_name 54.87.994.2

    # Customize HTTP response header
    add_header X-Served-By 228560-web-01;

    # Serve /airbnb-onepage/ route on AirBnB_clone_v3
    location = /airbnb-onepage/ {
        proxy_pass http://127.0.0.1:5000/airbnb-onepage/;
    }

    # Serve /number_odd_or_even/ route on AirBnB_clone_v2
    location ~ /airbnb-dynamic/number_odd_or_even/(\d+)$ {
        proxy_pass http://127.0.0.1:5001/number_odd_or_even/$1;
    }

    # Serve API on AirBnB_clone_v3
    location /api/ {
        proxy_pass http://127.0.0.1:5002/;
    }

    # Configure /2-hbnb route of AirBnB_clone_v4 as root location
    location / {
        proxy_pass http://127.0.0.1:5003/2-hbnb;
    }

    # Serve static content for AirBnB_clone_v4
    location /static {
        alias web_dynamic/static/;
    }

    error_page 404 /404.html;
    location /404 {
      root /var/www/html;
      internal;
    }
}

0x1A-application_server/gunicorn.service

[Unit]
Description=Gunicorn instance to serve AirBnB Clone
# Start after the network is available
After=network.target

[Service]
# Run the service under the 'ubuntu' user
User=ubuntu
# Set working directory
WorkingDirectory=/home/ubuntu/AirBnB_clone_v4
# Start Gunicorn with 3 workers, binding to 0.0.0.0:5003
ExecStart=gunicorn --workers 3 --bind 0.0.0.0:5003 web_dynamic.2-hbnb:app
# Restart the service if it fails
Restart=always
# Redirect standard output to syslog
StandardOutput=append:/tmp/airbnb-access.log
# Redirect standard error to syslog
StandardError=append:/tmp/airbnb-error.log
# Identifier for syslog messages
SyslogIdentifier=gunicorn

[Install]
# Enable the service for multi-user.target
WantedBy=multi-user.target











web_dynamic/static/scripts/2-hbnb.js

// This code will be executed once the DOM is ready
$(document).ready(init);

// The host URL for the API
const HOST = '0.0.0.0';

// Initialization function
function init() {
  // An object to store selected amenities
  const amenityObj = {};

  // Listen for changes on checkboxes inside the ".amenities .popover" element
  $('.amenities .popover input').change(function () {
    // If the checkbox is checked, add its data-name and data-id to the amenityObj
    if ($(this).is(':checked')) {
      amenityObj[$(this).attr('data-name')] = $(this).attr('data-id');
    } else if ($(this).is(':not(:checked)')) {
      // If the checkbox is unchecked, remove its data-name from the amenityObj
      delete amenityObj[$(this).attr('data-name')];
    }
    
    // Get the names of selected amenities, sort them, and update the content of the H4 element inside ".amenities"
    const names = Object.keys(amenityObj);
    $('.amenities h4').text(names.sort().join(', '));
  });

  // Call the apiStatus function to check the API status
  apiStatus();
}

// Function to check the API status
function apiStatus() {
  // The API endpoint URL
  const API_URL = `http://${HOST}:5001/api/v1/status/`;
  
  // Send a GET request to the API to get its status
  $.get(API_URL, (data, textStatus) => {
    // If the request is successful and the API status is 'OK', add the 'available' class to the element with ID 'api_status'
    if (textStatus === 'success' && data.status === 'OK') {
      $('#api_status').addClass('available');
    } else {
      // If the API status is not 'OK', remove the 'available' class from the element with ID 'api_status'
      $('#api_status').removeClass('available');
    }
  });
}

